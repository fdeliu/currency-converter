{"version":3,"sources":["img/logo.JPG","img/loading.gif","components/NavBar.js","data/currencies.js","components/AreaChart.js","components/Converter.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","NavBar","className","src","logo","alt","height","width","currencies","today","moment","format","defaultDate","subtract","AreaChart","state","startDate","endDate","isLoading","options","chart","id","xaxis","categories","series","name","data","handleChange","e","setState","target","value","getTimeSeriesRates","props","fromSymbol","toSymbol","rate","url","axios","get","then","res","rates","xValues","Object","keys","map","ele","values","yValues","key","push","yaxis","min","max","tickAmount","catch","err","console","log","this","role","type","classnames","onChange","onClick","disabled","loadingSpinner","Component","Converter","fromAmount","toAmount","date","historyRate","convertData","handleSelect","getLiveRates","isConverting","getDateRates","changeSymbols","style","padding","color","readOnly","placeholder","Footer","year","Date","getFullYear","paddingBottom","href","rel","App","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c7e15a2d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.b5d809e6.JPG\";","module.exports = __webpack_public_path__ + \"static/media/loading.bf4c97ed.gif\";","import React from 'react'\r\nimport logo from '../img/logo.JPG'\r\nexport default function NavBar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary fixed-top\">\r\n          <div className=\"container\">\r\n                <div className=\"navbar-brand\">\r\n                <h4>My Currency   \r\n                 <img src={logo} className=\"ml-2\" \r\n                alt=\"converter-logo\" height=\"32\" width=\"32\"/></h4>\r\n             </div>\r\n          </div>\r\n        </nav>\r\n    )\r\n}\r\n","export const currencies = {\"AUD\":\"Australian Dollar\",\"BGN\":\"Bulgarian Lev\",\"BRL\":\"Brazilian Real\",\"CAD\":\"Canadian Dollar\",\"CHF\":\"Swiss Franc\",\"CNY\":\"Chinese Renminbi Yuan\",\"CZK\":\"Czech Koruna\",\"DKK\":\"Danish Krone\",\"EUR\":\"Euro\",\"GBP\":\"British Pound\",\"HKD\":\"Hong Kong Dollar\",\"HRK\":\"Croatian Kuna\",\"HUF\":\"Hungarian Forint\",\"IDR\":\"Indonesian Rupiah\",\"ILS\":\"Israeli New Sheqel\",\"INR\":\"Indian Rupee\",\"ISK\":\"Icelandic Króna\",\"JPY\":\"Japanese Yen\",\"KRW\":\"South Korean Won\",\"MXN\":\"Mexican Peso\",\"MYR\":\"Malaysian Ringgit\",\"NOK\":\"Norwegian Krone\",\"NZD\":\"New Zealand Dollar\",\"PHP\":\"Philippine Peso\",\"PLN\":\"Polish Złoty\",\"RON\":\"Romanian Leu\",\"RUB\":\"Russian Ruble\",\"SEK\":\"Swedish Krona\",\"SGD\":\"Singapore Dollar\",\"THB\":\"Thai Baht\",\"TRY\":\"Turkish Lira\",\"USD\":\"United States Dollar\",\"ZAR\":\"South African Rand\"};","import React, { Component } from \"react\";\r\nimport Chart from \"react-apexcharts\";\r\nimport moment from 'moment';\r\nimport axios from 'axios';\r\nimport classnames from 'classnames';\r\nimport loadingSpinner from '../img/loading.gif';\r\n\r\n\r\nlet today = moment().format('YYYY-MM-DD');\r\nlet defaultDate = moment().subtract(1, 'months').format('YYYY-MM-DD');\r\n\r\n\r\nclass AreaChart extends Component {\r\n  state = {\r\n    startDate: defaultDate,\r\n    endDate: today,\r\n    isLoading: false,\r\n    options: {\r\n      chart: {\r\n        id: \"basic-bar\"\r\n      },\r\n      xaxis: {\r\n        categories: []\r\n      }\r\n    },\r\n    series: [\r\n      {\r\n        name: \"\",\r\n        data: []\r\n      }\r\n    ]\r\n  };\r\n\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      [e.target.name]: e.target.value\r\n    })\r\n  }\r\n  getTimeSeriesRates = (props) => {\r\n\r\n    const { startDate, endDate } = this.state;\r\n    const { fromSymbol, toSymbol, rate } = this.props;\r\n    if (endDate > startDate && endDate <= today) {\r\n      this.setState({\r\n        isLoading: true\r\n      })\r\n      const url = `https://frankfurter.app/${startDate}..${endDate}?from=${fromSymbol}&to=${toSymbol}`;\r\n      axios.get(url)\r\n        .then(res => {\r\n          const rates = res.data.rates;\r\n          const xValues = Object.keys(rates).map(ele => ele);\r\n          const values = Object.values(rates);\r\n          const yValues = [];\r\n          Object.values(values).map(key => yValues.push(key[toSymbol]));\r\n\r\n          this.setState({\r\n            options: {\r\n              xaxis: {\r\n                categories: xValues\r\n              },\r\n              yaxis: {\r\n                min: 0,\r\n                max: rate + 4,\r\n                tickAmount: 10\r\n              }\r\n            },\r\n            series: [\r\n              {\r\n                name: `1 ${fromSymbol} = ${toSymbol}`,\r\n                data: yValues,\r\n              }\r\n            ],\r\n            isLoading: false\r\n          })\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { startDate, endDate, isLoading } = this.state;\r\n    return (\r\n      <div className=\"card border-secondary mb-3\">\r\n        <div className=\"card-header text-center bg-primary text-white\"><h4>Get Time Series Data</h4></div>\r\n        <div className=\"card-body text-center\">\r\n          {startDate >= endDate ?\r\n            (<div className=\"alert alert-danger my-2\" role=\"alert\">\r\n              <strong>End date must be greater than start date</strong>\r\n            </div>) : null}\r\n          {endDate > today ?\r\n            (<div className=\"alert alert-danger my-2\" role=\"alert\">\r\n              <strong>End date must be less than or equal today's date</strong>\r\n            </div>) : null}\r\n          <div className=\"row\">\r\n            <div className=\"col\">\r\n              <label>Start Date:</label>\r\n              <input type=\"date\" value={startDate}\r\n                name=\"startDate\"\r\n                max={endDate}\r\n                className={classnames('form-control', {\r\n                  'is-invalid': startDate === endDate ? true : false\r\n                })}\r\n                onChange={this.handleChange} />\r\n            </div>\r\n            <div className=\"col\">\r\n              <label>End Date:</label>\r\n              <input type=\"date\" value={endDate} name=\"endDate\"\r\n                max={endDate}\r\n                className={classnames('form-control', {\r\n                  'is-invalid': startDate === endDate ? true : false\r\n                })}\r\n                onChange={this.handleChange} />\r\n            </div>\r\n          </div>\r\n          <button type=\"button\" onClick={this.getTimeSeriesRates}\r\n            disabled={(startDate === \"\" || startDate >= endDate || endDate > today) ? true : false}\r\n            className=\"btn btn-primary my-3\">Get Rates</button>\r\n          {\r\n            isLoading ? (\r\n              <div className=\"text-center my-3\">\r\n                <img src={loadingSpinner} alt=\"loading-spinner\" />\r\n              </div>) : (\r\n                <Chart\r\n                  options={this.state.options}\r\n                  series={this.state.series}\r\n                  type=\"line\"\r\n                  width=\"100%\"\r\n                />\r\n              )\r\n          }\r\n        </div>\r\n      </div>\r\n\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default AreaChart;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\nimport classnames from 'classnames';\r\n\r\nimport { currencies } from \"../data/currencies\";\r\n\r\nimport AreaChart from './AreaChart';\r\n\r\nlet today = moment().format('YYYY-MM-DD');\r\n\r\nclass Converter extends Component {\r\n    state = {\r\n        fromAmount: 1,\r\n        toAmount: \"\",\r\n        fromSymbol: \"EUR\",\r\n        toSymbol: \"USD\",\r\n        date: today,\r\n        historyRate: \"\",\r\n        rate: \"\"\r\n    }\r\n    componentDidMount() {\r\n        this.getLiveRates();\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        }, this.convertData)\r\n    }\r\n\r\n    handleSelect = (e) => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        }, this.getLiveRates);\r\n    }\r\n    getLiveRates = () => {\r\n        const { fromSymbol, toSymbol } = this.state;\r\n        if (fromSymbol !== toSymbol) {\r\n            axios.get(`https://frankfurter.app/latest?from=${fromSymbol}&to=${toSymbol}`)\r\n                .then(res => {\r\n                    this.setState({\r\n                        rate: res.data.rates[toSymbol],\r\n                        isConverting: false\r\n                    }, this.convertData)\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n\r\n    }\r\n    convertData = () => {\r\n        const { fromAmount, fromSymbol, toSymbol } = this.state;\r\n        if (fromAmount !== \"\") {\r\n            axios.get(`https://frankfurter.app/latest?amount=${fromAmount}&from=${fromSymbol}&to=${toSymbol}`)\r\n                .then(res => {\r\n                    this.setState({\r\n                        toAmount: res.data.rates[toSymbol]\r\n                    })\r\n                })\r\n                .catch(err => console.log(err))\r\n        }\r\n    }\r\n\r\n    getDateRates = () => {\r\n        const { date, fromSymbol, toSymbol } = this.state;\r\n        if (date !== \"\") {\r\n            axios.get(`https://frankfurter.app/${date}?from=${fromSymbol}&to=${toSymbol}`)\r\n                .then(res => {\r\n                    this.setState({\r\n                        historyRate: res.data.rates[toSymbol]\r\n                    })\r\n                })\r\n        }\r\n    }\r\n    changeSymbols = () => {\r\n        const { fromSymbol, toSymbol } = this.state;\r\n        this.setState({\r\n            fromSymbol: toSymbol,\r\n            toSymbol: fromSymbol\r\n        }, this.getLiveRates)\r\n    }\r\n    render() {\r\n\r\n        const { fromSymbol, toSymbol, date, rate } = this.state;\r\n        return (\r\n            <div className=\"row\" style={{ padding: \"70px 0px\" }}>\r\n                <div className=\"col-md-12 col-lg-4\">\r\n                    <div className=\"card border-secondary mb-3\">\r\n                        <div className=\"card-header bg-primary text-white\">\r\n                            <h4>Converter</h4>\r\n                        </div>\r\n                        <div className=\"card-body\">\r\n                            {fromSymbol === toSymbol ? (<div className=\"alert alert-danger my-2 text-center\" role=\"alert\">\r\n                                <strong>Currencies must be different</strong>\r\n                            </div>) : null}\r\n                            <h4 className=\"card-title text-center\">\r\n                                1 {fromSymbol} = {this.state.rate} {toSymbol}\r\n                            </h4>\r\n                            <form>\r\n                                <div className=\"row my-3 text-center\">\r\n                                    <div className=\"col\">\r\n                                        <div className=\"form-group\">\r\n                                            <select className={classnames('form-control', {\r\n                                                'is-invalid': fromSymbol === toSymbol ? true : false\r\n                                            })}\r\n                                                value={this.state.fromSymbol}\r\n                                                id=\"fromSymbol\"\r\n                                                name=\"fromSymbol\"\r\n                                                onChange={this.handleSelect}>\r\n                                                {Object.keys(currencies).map(key =>\r\n                                                    <option value={key} key={key}>{currencies[key]}</option>\r\n                                                )}\r\n                                            </select>\r\n                                            <div className=\"my-3\">\r\n                                                <input type=\"number\" className=\"form-control\"\r\n                                                    min=\"0\" name=\"fromAmount\"\r\n                                                    width=\"auto\"\r\n                                                    value={this.state.fromAmount}\r\n                                                    onChange={this.handleChange}\r\n                                                />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                    <p className=\"text-center\">\r\n                                        <i className=\"fa fa-refresh fa-2x\" style={{ color: '#2C3E50' }}\r\n                                            onClick={this.changeSymbols} />\r\n                                    </p>\r\n                                    <div className=\"col\">\r\n                                        <div className=\"form-group\">\r\n                                            <select className={classnames('form-control', {\r\n                                                'is-invalid': fromSymbol === toSymbol ? true : false\r\n                                            })}\r\n                                                value={this.state.toSymbol}\r\n                                                id=\"toSymbol\"\r\n                                                name=\"toSymbol\"\r\n                                                onChange={this.handleSelect}>\r\n                                                {Object.keys(currencies).map(key =>\r\n                                                    <option value={key} key={key}>{currencies[key]}</option>\r\n                                                )}\r\n                                            </select>\r\n                                            <div className=\"my-3\">\r\n                                                <input type=\"number\" className=\"form-control\" readOnly name=\"toAmount\" value={this.state.toAmount} onChange={this.handleChange} placeholder=\"0\" />\r\n                                            </div>\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            </form>\r\n                        </div>\r\n                        <div className=\"card-header bg-primary text-white\"><h4>Get rates for a specific day</h4></div>\r\n                        <div className=\"card-body\">\r\n                            <label>Enter Date:</label>\r\n                            <input type=\"date\" value={date} className=\"form-control\" max={today}\r\n                                onChange={e => this.setState({ date: e.target.value })} />\r\n                            <button type=\"button\" onClick={this.getDateRates} disabled={(date === \"\" || date > today) ? true : false} className=\"btn btn-primary my-3\">Get Rate</button>\r\n                            <h4>1 {fromSymbol} = {this.state.historyRate} {toSymbol}</h4>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"col-md-12 col-lg-8\">\r\n                    <AreaChart fromSymbol={fromSymbol} toSymbol={toSymbol} rate={rate} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Converter;","import React from 'react'\r\n\r\nexport default function Footer() {\r\n    let year = new Date().getFullYear();\r\n    return (\r\n        <div className=\"bg-primary text-white\" style={{paddingBottom:\"10px\"}}>\r\n           <div className=\"container d-flex\">\r\n                <p className=\"pt-4\">Disclamer: This application uses <a href=\"https://www.frankfurter.app\" target=\"_blank\" rel=\"noopener noreferrer\"><strong>Frankfurter API</strong></a></p>\r\n                <p className=\"pt-4 ml-auto\">{year} &copy; Flamur Deliu</p>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { Component } from \"react\";\nimport NavBar from './components/NavBar'\nimport Converter from './components/Converter';\nimport Footer from './components/Footer';\nimport './App.css';\n\n\nclass App extends Component {\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar />\n        <div className=\"container py-4\"> \n          <Converter />\n        </div>\n        <Footer/>\n      </React.Fragment>\n     \n    )\n  };\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}